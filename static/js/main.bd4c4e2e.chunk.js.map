{"version":3,"sources":["Colors.js","Components/CanvasExtended.jsx","Components/CanvasPlane.jsx","Components/Fourier.jsx","App.jsx","index.js"],"names":["COLORS","CanvasExtended","tryInit","draw","canvasHeight","padding","canvasRef","useRef","useState","update","setUpdate","updateWidthAndHeight","Math","random","useEffect","canvas","current","context","getContext","width","window","innerWidth","height","style","position","addEventListener","removeEventListener","CanvasPlane","props","startDrawToCanvas","drawToCanvas","stopDrawToCanvas","rest","onTouchStart","e","touches","clientX","clientY","onTouchMove","onTouchEnd","onMouseDown","nativeEvent","offsetX","offsetY","onMouseMove","onMouseUp","className","ref","minimumLinePointAmount","TWO_PI","PI","updatesInOneRotation","vectorMoveSpeed","Fourier","arrows","drawingScale","visitedArrowPoints","updateCanvasHandle","initCanvasRef","initArrows","setInterval","updateCanvas","Array","maxVectorAmount","middlePoint","i","Arrow","resetArrowRotations","loopStartIndex","vectorAmount","currentAngle","startAngle","setSamplePointAmountToMin","pointsToInterpolate","lengthBetweenPointsArr","length","totalLength","sqrt","pow","newPointArr","distBetweenNewPoints","lengthToNextPointFromPrewPoint","interpolatePointIndex","newPointIndex","percentage","p1","p2","setTracedPoints","calculateArrows","centerOfMass","t","tracedPoints","point","phi","rotatingSpeed","xPart","cos","yPart","sin","atan2","magnitude","correct0Vector","calculateFullApproximatedPath","midX","midY","x","y","arrow","userDrawing","mag","ang","newX","newY","computeDrawingScale","minX","minY","maxX","maxY","xMult","yMult","min","pointsNowDrawing","canvasStartDraw","posX","posY","userNowDrawing","push","canvasDraw","canvasStopDraw","setUserDrawing","callingThis","rotateVectors","drawArrows","drawArrow","pos","strokeStyle","from","arrowLen","headSize","dx","dy","angle","beginPath","moveTo","lineTo","stroke","fill","lineWidth","fillStyle","fillRect","drawDrawedLine","drawApproximatedLine","middlePos","middleIndex","halfVectorAmount","shift","prevProps","prevState","this","console","log","Component","App","document","body","classList","add","setCanvasRef","drawVectors","setDrawVectors","setVectorAmount","showStartModal","setShow","downloadButtonPressed","image","toDataURL","replace","link","createElement","download","href","click","downloadCanvasAsImage","oReq","XMLHttpRequest","points","getTracedPoints","ParseSVG","open","send","use","htmlFor","id","type","onChange","undefined","target","files","preventDefault","reader","FileReader","onload","result","readAsText","readAndUseSVG","onClick","name","value","max","toString","step","onInput","event","Number","rel","Modal","show","onHide","dialogClassName","size","Header","closeButton","Title","Body","parsedText","distanceBetweenPoints","x1","y1","x2","y2","lastPoint","control","control2","endPoint","dist","parseInt","f","warn","text","parsed","prevElementEndIndex","continueParsing","substring","error","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bd4c4e2e.chunk.js","sourcesContent":["export const COLORS = {\r\n    white: '#dfe6e9',\r\n    whiteDark: '#b2bec3',\r\n    red: '#ff7675',\r\n    redDark: '#d63031',\r\n    blue: '#74b9ff',\r\n    blueDark: '#0984e3',\r\n    black: '#636e72',\r\n    blackDark: '#2d3436',\r\n    blackDarkDark: '#151c1e',\r\n    green: '#00b894',\r\n}","import { useRef, useEffect, useState } from 'react'\r\n\r\nconst CanvasExtended = (tryInit, draw, canvasHeight, padding) => {\r\n  const canvasRef = useRef(null)\r\n\r\n  const [update, setUpdate] = useState(1);\r\n  const updateWidthAndHeight = () => {\r\n    setUpdate(Math.random());\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    tryInit(canvas);\r\n    canvas.width = window.innerWidth - padding;\r\n    canvas.height = canvasHeight;\r\n    \r\n    canvas.style.position = \"center\";\r\n\r\n    draw(context);\r\n    window.addEventListener(\"resize\", updateWidthAndHeight);\r\n    return () => window.removeEventListener(\"resize\", updateWidthAndHeight);\r\n  }, [update]);\r\n  \r\n  return canvasRef;\r\n}\r\n\r\nexport default CanvasExtended;","import React from 'react'\r\nimport CanvasExtended from './CanvasExtended'\r\nimport '../App.css'\r\n\r\nexport default function CanvasPlane(props) {\r\n    const { tryInit, draw, height, padding, startDrawToCanvas, drawToCanvas, stopDrawToCanvas, ...rest } = props;\r\n    const canvasRef = CanvasExtended(tryInit, draw, height, padding);\r\n    \r\n    return (\r\n        <div>\r\n        <canvas \r\n            onTouchStart={(e) => startDrawToCanvas(e.touches[0].clientX, e.touches[0].clientY)} \r\n            onTouchMove={(e) => drawToCanvas(e.touches[0].clientX, e.touches[0].clientY)} \r\n            onTouchEnd={(e) => stopDrawToCanvas()} \r\n            onMouseDown={({nativeEvent}) => startDrawToCanvas(nativeEvent.offsetX, nativeEvent.offsetY)}\r\n            onMouseMove={({nativeEvent}) => drawToCanvas(nativeEvent.offsetX, nativeEvent.offsetY)}\r\n            onMouseUp={() => stopDrawToCanvas()}\r\n            className=\"extendedCanvas\"\r\n            ref={canvasRef}\r\n            {...rest}\r\n        >Preview not supported in this browser.</canvas>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\"\r\nimport { COLORS } from \"../Colors\"\r\nimport CanvasPlane from './CanvasPlane'\r\n\r\n\r\nconst idealDrawingWidth = 400;\r\nconst idealDrawingHeight = 400;\r\nconst secondsForOneRotation = 15;\r\nconst updateMsDelay = 20;\r\n\r\nconst canvasPixelPadding = 50;\r\nconst canvasPixelHeight = 500;\r\nconst canvasPixelHeightStr = '500px';\r\n\r\n// If adding more vectors causes the approx line blow off, increase this. If takes too long to calculate the vectors, decrease\r\nconst minimumLinePointAmount = 100;\r\n\r\nconst TWO_PI = Math.PI*2;\r\nconst updatesInOneRotation = 1 / (updateMsDelay * 0.001) * secondsForOneRotation;\r\nconst vectorMoveSpeed = ((1 / secondsForOneRotation) / (1 / (updateMsDelay * 0.001))) * TWO_PI;\r\nclass Fourier extends Component {\r\n    arrows = [];\r\n    drawingScale = 1;\r\n    visitedArrowPoints = [];\r\n    updateCanvasHandle = null;\r\n    \r\n    tryInit = (canvas) => {\r\n        if(this.props.canvasRef !== null)\r\n            return;\r\n        \r\n        this.props.initCanvasRef(canvas);\r\n        this.initArrows();\r\n\r\n        let context = canvas.getContext('2d');\r\n        if (this.updateCanvasHandle === null)\r\n            this.updateCanvasHandle = setInterval(this.updateCanvas, updateMsDelay, context, this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.tracedPoints.length !== 0 && (\r\n            (prevProps.tracedPoints !== this.props.tracedPoints)\r\n            )) {\r\n            console.log(\"Calculating everything again\");\r\n            this.visitedArrowPoints = [];\r\n            this.calculateArrows();\r\n            this.computeDrawingScale();\r\n\r\n            if (!this.props.drawArrows) {\r\n                this.calculateFullApproximatedPath();\r\n            }\r\n        }\r\n\r\n        if (prevProps.vectorAmount !== this.props.vectorAmount) {\r\n            this.visitedArrowPoints = [];\r\n            this.resetArrowRotations();\r\n            if (!this.props.drawArrows)\r\n                this.calculateFullApproximatedPath();\r\n\r\n            return; // User changed vectorAmount, don't trigger other updates\r\n        }\r\n\r\n        if (this.props.drawArrows !== prevProps.drawArrows) {\r\n            if (this.props.drawArrows)\r\n                this.visitedArrowPoints = [];\r\n            else\r\n                this.calculateFullApproximatedPath();\r\n        }\r\n    }\r\n\r\n    initArrows = () => {\r\n        this.arrows = Array(this.props.maxVectorAmount);\r\n        let middlePoint = (this.props.maxVectorAmount-1)/2;\r\n        for (let i = 0; i < this.props.maxVectorAmount; i++) {\r\n            this.arrows[i] = new Arrow(i-middlePoint, 0, 0);\r\n        }\r\n    }\r\n\r\n    resetArrowRotations = () => {\r\n        let loopStartIndex = this.props.maxVectorAmount/2-this.props.vectorAmount/2;\r\n        for (let i = loopStartIndex; i < loopStartIndex+this.props.vectorAmount; i++) {\r\n            this.arrows[i].currentAngle = this.arrows[i].startAngle;\r\n        }\r\n    }\r\n\r\n    setSamplePointAmountToMin = (pointsToInterpolate) => {\r\n        // Get line lengths\r\n        let lengthBetweenPointsArr = new Array(pointsToInterpolate.length-1);\r\n        let totalLength = 0;\r\n        for (let i = 0; i < pointsToInterpolate.length-1; i++) {\r\n            let length = Math.sqrt(Math.pow(pointsToInterpolate[i][0] - pointsToInterpolate[i][1], 2),\r\n                Math.pow(pointsToInterpolate[i+1][0] - pointsToInterpolate[i+1][1], 2));\r\n            lengthBetweenPointsArr[i] = length;\r\n            totalLength += length;\r\n        }\r\n\r\n        let newPointArr = new Array(minimumLinePointAmount+1);\r\n        let distBetweenNewPoints = totalLength / minimumLinePointAmount;\r\n        let lengthToNextPointFromPrewPoint = distBetweenNewPoints;\r\n        newPointArr[0] = pointsToInterpolate[0];\r\n        let interpolatePointIndex = 0;\r\n        let newPointIndex = 1;\r\n        while (true) {\r\n            while (lengthToNextPointFromPrewPoint > lengthBetweenPointsArr[interpolatePointIndex]) {\r\n                lengthToNextPointFromPrewPoint -= lengthBetweenPointsArr[interpolatePointIndex];\r\n                interpolatePointIndex++;\r\n            }\r\n            if (interpolatePointIndex+1 > lengthBetweenPointsArr.length)\r\n                break;\r\n\r\n            let percentage = lengthToNextPointFromPrewPoint / lengthBetweenPointsArr[interpolatePointIndex];\r\n            let p1 = pointsToInterpolate[interpolatePointIndex];\r\n            let p2 = pointsToInterpolate[interpolatePointIndex+1];\r\n            newPointArr[newPointIndex] = [p1[0] + percentage * (p2[0] - p1[0]), p1[1] + percentage * (p2[1] - p1[1])];\r\n            lengthToNextPointFromPrewPoint += distBetweenNewPoints;\r\n            newPointIndex++;\r\n        }\r\n        newPointArr[minimumLinePointAmount] = pointsToInterpolate[pointsToInterpolate.length-1];\r\n        this.props.setTracedPoints(newPointArr);\r\n    }\r\n\r\n    calculateArrows = () => {\r\n        if (this.props.maxVectorAmount !== this.arrows.length)\r\n            this.initArrows();\r\n\r\n        for(let i = 0; i < this.props.maxVectorAmount; i++) {\r\n            let centerOfMass = [0, 0];\r\n            for (let t = 0; t < this.props.tracedPoints.length; t++) {\r\n                const point = this.props.tracedPoints[t];\r\n                const phi = (t/this.props.tracedPoints.length) * TWO_PI * this.arrows[i].rotatingSpeed;\r\n                const xPart = Math.cos(phi);\r\n                const yPart = -Math.sin(phi);\r\n\r\n                centerOfMass[0] += xPart * point[0] - yPart * point[1];\r\n                centerOfMass[1] += xPart * point[1] + yPart * point[0];\r\n            }\r\n            centerOfMass[0] /= this.props.tracedPoints.length;\r\n            centerOfMass[1] /= this.props.tracedPoints.length;\r\n\r\n            this.arrows[i].startAngle = Math.atan2(centerOfMass[1], centerOfMass[0]);\r\n            this.arrows[i].magnitude = Math.sqrt(Math.pow(centerOfMass[0], 2) + Math.pow(centerOfMass[1], 2));\r\n            this.arrows[i].currentAngle = this.arrows[i].startAngle;\r\n        }\r\n        this.correct0Vector();\r\n    }\r\n    calculateFullApproximatedPath = () => {\r\n        this.visitedArrowPoints = new Array(updatesInOneRotation+1);\r\n        let midX = this.props.canvasRef.width / 2;\r\n        let midY = this.props.canvasRef.height / 2;\r\n        let loopStartIndex = this.props.maxVectorAmount/2-this.props.vectorAmount/2;\r\n        for (let t = 0; t < updatesInOneRotation; t++) {\r\n            let x = 0;\r\n            let y = 0;\r\n            for (let i = loopStartIndex; i < loopStartIndex+this.props.vectorAmount; i++) {\r\n                const arrow = this.arrows[i];\r\n                if (arrow.rotatingSpeed === 0 && !this.props.userDrawing)\r\n                    continue;\r\n                x += Math.cos(arrow.currentAngle) * arrow.magnitude;\r\n                y += Math.sin(arrow.currentAngle) * arrow.magnitude;\r\n                arrow.currentAngle += arrow.rotatingSpeed * vectorMoveSpeed;\r\n            }\r\n            this.visitedArrowPoints[t] = [x * this.drawingScale + midX, y * this.drawingScale + midY];\r\n        }\r\n        // End is same as start\r\n        this.visitedArrowPoints[updatesInOneRotation] = this.visitedArrowPoints[0];\r\n    }\r\n    correct0Vector = () => {\r\n        // Subtract half the screen from 0 vector because it starts from the middle\r\n        let i = (this.props.maxVectorAmount-1)/2;\r\n        const mag = this.arrows[i].magnitude;\r\n        const ang = this.arrows[i].startAngle;\r\n        const newX = Math.cos(ang)*mag - this.props.canvasRef.width / 2;\r\n        const newY = Math.sin(ang)*mag - this.props.canvasRef.height / 2;\r\n        \r\n        this.arrows[i].startAngle = Math.atan2(newY, newX);\r\n        this.arrows[i].magnitude = Math.sqrt(Math.pow(newX, 2) + Math.pow(newY, 2));\r\n        this.arrows[i].currentAngle = this.arrows[i].startAngle;\r\n    }\r\n\r\n    computeDrawingScale = () => {\r\n        if (this.props.userDrawing) {\r\n            this.drawingScale = 1;\r\n            return;\r\n        }\r\n\r\n        let minX = this.props.tracedPoints[0][0];\r\n        let minY = this.props.tracedPoints[0][1];\r\n        let maxX = this.props.tracedPoints[0][0];\r\n        let maxY = this.props.tracedPoints[0][1];\r\n        for (let i = 1; i < this.props.tracedPoints.length; i++) {\r\n            const point = this.props.tracedPoints[i];\r\n            if (point[0] < minX) minX = point[0];\r\n            if (point[0] > maxX) maxX = point[0];\r\n            if (point[1] < minY) minY = point[1];\r\n            if (point[1] > maxY) maxY = point[1];\r\n        }\r\n\r\n        const xMult = idealDrawingWidth / (maxX - minX);\r\n        const yMult = idealDrawingHeight / (maxY - minY);\r\n        \r\n        this.drawingScale = Math.min(xMult, yMult);\r\n    }\r\n\r\n    pointsNowDrawing = [];\r\n    userDrawing = false;\r\n    canvasStartDraw = (posX, posY) => {\r\n        this.userNowDrawing = true;\r\n        this.pointsNowDrawing = [];\r\n        this.pointsNowDrawing.push([posX, posY]);\r\n    }\r\n    canvasDraw = (posX, posY) => {\r\n        this.pointsNowDrawing.push([posX, posY]);\r\n    }\r\n    canvasStopDraw = () => {\r\n        // Can't interpolate if there is less than 2 points\r\n        if (this.pointsNowDrawing.length < 2) {\r\n            this.userNowDrawing = false;\r\n            return;\r\n        }\r\n\r\n        this.userNowDrawing = false;\r\n        this.props.setUserDrawing(true);\r\n\r\n        if (this.pointsNowDrawing.length < minimumLinePointAmount)\r\n            this.setSamplePointAmountToMin(this.pointsNowDrawing);\r\n        else\r\n            this.props.setTracedPoints(this.pointsNowDrawing);\r\n\r\n        this.pointsNowDrawing = [];\r\n    }\r\n\r\n    updateCanvas = (context, callingThis) => {\r\n        callingThis.rotateVectors();\r\n        callingThis.draw(context);\r\n    }\r\n\r\n    rotateVectors = () => {\r\n        if (!this.props.drawArrows)\r\n            return;\r\n\r\n        let loopStartIndex = this.props.maxVectorAmount/2-this.props.vectorAmount/2;\r\n        for (let i = loopStartIndex; i < loopStartIndex+this.props.vectorAmount; i++)\r\n            this.arrows[i].currentAngle += this.arrows[i].rotatingSpeed * vectorMoveSpeed;\r\n    }\r\n/*\r\n    LerpColor = (color1Str, color2Str, t) => {\r\n        let color1 = [parseInt(color1Str.substring(1, 3), 16), parseInt(color1Str.substring(3, 5), 16), parseInt(color1Str.substring(5, 7), 16)];\r\n        let color2 = [parseInt(color2Str.substring(1, 3), 16), parseInt(color2Str.substring(3, 5), 16), parseInt(color2Str.substring(5, 7), 16)];\r\n        // DO NOT INDENT\r\n        return `#${Math.floor(color1[0] + t * (color2[0] - color1[0])).toString(16)}\\\r\n${Math.floor(color1[1] + t * (color2[1] - color1[1])).toString(16)}\\\r\n${Math.floor(color1[2] + t * (color2[2] - color1[2])).toString(16)}`;\r\n    }\r\n    //*/\r\n\r\n    drawArrow = (context, i, pos) => {\r\n        context.strokeStyle = COLORS.red;\r\n        let from = [pos[0], pos[1]];\r\n        pos[0] += Math.cos(this.arrows[i].currentAngle) * this.drawingScale * this.arrows[i].magnitude;\r\n        pos[1] += Math.sin(this.arrows[i].currentAngle) * this.drawingScale * this.arrows[i].magnitude;\r\n\r\n        let arrowLen = Math.sqrt(Math.pow(pos[0] - from[0], 2) + Math.pow(pos[1] - from[1], 2));\r\n        var headSize = Math.min(arrowLen / 5, 12); // HeadSize is a fift from length, capped at 12\r\n        var dx = pos[0] - from[0];\r\n        var dy = pos[1] - from[1];\r\n        var angle = Math.atan2(dy, dx);\r\n\r\n        context.beginPath();\r\n        context.moveTo(from[0], from[1]);\r\n        context.lineTo(pos[0], pos[1]);\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.moveTo(pos[0], pos[1]);\r\n        context.lineTo(pos[0] - headSize * Math.cos(angle - Math.PI / 6), pos[1] - headSize * Math.sin(angle - Math.PI / 6));\r\n        context.lineTo(pos[0] - headSize * Math.cos(angle + Math.PI / 6), pos[1] - headSize * Math.sin(angle + Math.PI / 6));\r\n        context.fill();\r\n\r\n        // Circles around arrows\r\n        /*\r\n        context.beginPath();\r\n        context.strokeStyle = COLORS.blueDark;\r\n        context.arc(from[0], from[1], arrowLen, 0, TWO_PI);\r\n        context.stroke();\r\n        //*/\r\n    }\r\n\r\n    draw = (context) => {\r\n        context.lineWidth = 1.5;\r\n\r\n        // BG\r\n        context.fillStyle = COLORS.blackDarkDark;//COLORS.blackDark;\r\n        context.beginPath();\r\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\t\tcontext.fill();\r\n\r\n        if (this.userNowDrawing) this.drawDrawedLine(context);\r\n        else this.drawApproximatedLine(context);\r\n    }\r\n\r\n    drawDrawedLine = (context) => {\r\n        context.beginPath()\r\n        context.strokeStyle = COLORS.black;\r\n        for (let i = 0; i < this.pointsNowDrawing.length; i++) {\r\n            context.lineTo(this.pointsNowDrawing[i][0], this.pointsNowDrawing[i][1]);\r\n        }\r\n        context.stroke();\r\n    }\r\n    drawApproximatedLine = (context) => {\r\n        let middlePos = [context.canvas.width / 2, context.canvas.height / 2];\r\n\r\n        // Blue line\r\n        /*\r\n        context.beginPath();\r\n\t\tcontext.fillStyle = COLORS.blue;\r\n\t\tfor (let i = 0; i < this.props.tracedPoints.length; i++){\r\n\t\t\tlet pCoors = this.props.tracedPoints[i];\r\n\t\t\tcontext.moveTo(pCoors[0], pCoors[1]);\r\n\t\t\tcontext.arc(pCoors[0], pCoors[1], 0.5, 0, 2*Math.PI);\r\n\t\t}\r\n\t\tcontext.fill();\r\n        //*/\r\n\r\n        // Arrows\r\n        if (this.props.drawArrows) {\r\n            context.strokeStyle = COLORS.red;\r\n            context.fillStyle = COLORS.red;\r\n            let pos = middlePos;\r\n            let middleIndex = (this.props.maxVectorAmount-1)/2;\r\n            let halfVectorAmount = (this.props.vectorAmount-1)/2\r\n            if (this.props.userDrawing)\r\n                this.drawArrow(context, middleIndex, pos, 0);\r\n            for (let i = 0; i < halfVectorAmount; i++) {\r\n                this.drawArrow(context, middleIndex-i-1, pos, 0);\r\n                this.drawArrow(context, middleIndex+i+1, pos, 0);\r\n            }\r\n\r\n            // Handle position array\r\n            if (this.visitedArrowPoints.length > updatesInOneRotation * 19/20)\r\n                this.visitedArrowPoints.shift();\r\n            this.visitedArrowPoints.push(pos);\r\n        }\r\n        \r\n        // Line\r\n        context.lineWidth = 2;\r\n        context.beginPath();\r\n        context.strokeStyle = COLORS.black;\r\n        for (let i = 0; i < this.visitedArrowPoints.length; i++) {\r\n            context.lineTo(this.visitedArrowPoints[i][0], this.visitedArrowPoints[i][1]);\r\n        }\r\n        context.stroke();\r\n    }\r\n\r\n    render() {\r\n        // Return a canvasPlane and a div of that height, since canvasPlane doesn't take any height\r\n        return <>\r\n            <div style={{height: canvasPixelHeightStr}}>\r\n            <CanvasPlane \r\n                canvasRef={this.props.canvasRef}\r\n                tryInit={this.tryInit}\r\n                draw={this.draw}\r\n                height={canvasPixelHeight}\r\n                padding={canvasPixelPadding}\r\n                startDrawToCanvas={this.canvasStartDraw}\r\n                drawToCanvas={this.canvasDraw}\r\n                stopDrawToCanvas={this.canvasStopDraw}\r\n            />\r\n            </div>\r\n        </>\r\n    }\r\n}\r\nexport default Fourier;\r\n\r\nclass Arrow {\r\n    constructor(rotatingSpeed, startAngle, magnitude) {\r\n        this.startAngle = startAngle;\r\n        this.rotatingSpeed = rotatingSpeed;\r\n        this.currentAngle = startAngle;\r\n        this.magnitude = magnitude;\r\n    }\r\n\r\n    magnitude = 1;\r\n    rotatingSpeed = 0;\r\n    startAngle = 0;\r\n    currentAngle = 0;\r\n}","import React, { useState, useEffect } from 'react';\nimport Fourier from './Components/Fourier.jsx'\nimport { Modal } from 'react-bootstrap'\n\nconst maxVectorAmount = 201;/*Amount should be 2n+1*/\n\nfunction App() {\n  document.body.classList.add('body');\n  const [canvasRef, setCanvasRef] = useState(null); // At start, never changed\n  const [drawVectors, setDrawVectors] = useState(true);\n  const [userDrawing, setUserDrawing] = useState(false);\n  const [vectorAmount, setVectorAmount] = useState(60);\n  const [tracedPoints, setTracedPoints] = useState([]);\n\n  const [showStartModal, setShow] = useState(true);\n\n  useEffect(() => {\n    // load moose svg\n\n    function reqListener () {\n      const points = getTracedPoints(ParseSVG(' d=\"M401.1931,300.0653c6.9587-16.5024,1.1309-34.3917,5.8437-50.973c2.6783-9.423,3.8895-19.9865,13.0391-26.5758c3.6019-2.594,4.0661-7.2811,5.6613-11.1949c1.2339-3.0275,0.933-7.8192,6.4201-7.0945c5.6024,0.7399,4.5854,5.8254,3.4956,8.1104c-3.7943,7.9557-0.2896,15.4131,0.2517,23.0589c1.2418,17.5378-0.9089,34.961-1.5911,52.4376c-0.3345,8.5695,7.0813,12.4311,13.2441,15.7339c4.0013,2.1444,7.0392-2.7976,10.2788-5.1871\\\n      c11.641-8.5862,18.3091-20.46,23.3766-33.6335c2.3626-6.1418,7.2159-9.8965,14.1019-8.3949c6.6397,1.4479,7.9132,6.6343,8.4045,12.9405c0.299,3.8383-0.4295,9.2667,3.87,11.591c7.4719,4.0392,14.3405,0.1884,20.8823-3.2007c0.9216-0.4774,0.8469-3.3126,0.8458-5.0562c-0.0036-5.6006,2.7366-9.4213,7.9629-10.6333c5.2654-1.2211,9.9478,0.3272,12.4816,5.7412c2.2437,4.7939,4.2105,9.6622,4.1523,15.1041c-0.0475,4.4343,3.2358,6.4937,6.5752,7.8\\\n      c3.536,1.3832,4.7212-2.0964,6.136-4.3481c7.8904-12.5581,14.8207-15.778,23.283-10.4176c7.8196,4.9534,4.5891,13.6296,5.9179,20.5126c0.9791,5.0715,1.8828,9.5646,5.0934,13.6349c1.286,1.6304,2.0001,0.7992,2.1445-0.2639c1.6511-12.1594,10.4315-22.0511,11.9385-33.781c1.6163-12.5815,13.6674-19.128,15.1739-31.3119c0.3893-3.1484,3.9043-4.9337,7.5438-3.995\\\n      c3.463,0.8932,2.4513,3.9019,2.5126,6.2426c0.508,19.4109-2.3331,38.295-8.8639,56.6213c-1.1832,3.3202,1.5621,1.707,2.4239,1.3605c4.6436-1.8667,9.4769-1.2553,14.2649-1.4746c6.5226-0.2988,12.8407,0.0933,14.8035,7.7358c1.9598,7.6305-2.8735,13.0305-8.7355,15.7356c-11.3058,5.2173-21.2812,11.7063-29.1761,21.4077c-3.6868,4.5306-1.5653,9.5515-1.5486,14.2992c0.006,1.6819,1.9692-0.2571,2.9968-0.6604\\\n      c7.5785-2.974,13.9602-9.042,23.0192-8.2424c4.2009,0.3707,7.4743,1.865,9.5515,5.3164c6.0376,10.0318,9.9708,20.445,9.9926,32.6798c0.0408,22.9499-0.4113,45.5529-9.6989,67.1885c-1.4852,3.4599-4.3157,10.2945-0.3304,12.3438c5.5607,2.8593,9.7273-2.4299,12.9394-7.1599c2.3174-3.4125,4.8644-6.7096,7.6237-9.7748c17.1367-19.0364,20.6002-43.053,20.1788-66.5831c-0.5511-30.7731-1.7609-61.6677,17.0741-87.2854c8.0933-11.0078,16.8752-22.4363,26.9767-32.2348\\\n      c1.9952-1.9353,4.9916-1.7913,6.8938-0.1488c2.5578,2.2084,1.6192,5.2985,0.6418,8.2178c-6.5154,19.4603-13.8159,38.7206-19.0012,58.5326c-2.095,8.0045-1.5654,17.0922,1.5958,25.9355c3.2064,8.9698-0.1887,19.2536,3.7801,28.738c1.5291,3.6537,2.1405,7.9804,4.2648,11.4985c3.5962,5.956,12.397,3.4512,17.1591-5.6477c14.3458-27.4113,29.3417-54.8119,31.3295-86.5169\\\n      c0.7002-11.1669-2.5024-22.5213-2.9014-33.8261c-0.867-24.5732-0.1917-49.2304-1.8749-73.7346c-1.0701-15.5785-2.855-31.0537,0.5256-46.3592c1.7178-7.7767,5.3126-15.203,8.5762-22.5581c4.3191-9.7339,9.085-19.2725,13.7853-28.8327c1.6575-3.3713,5.5519-4.2594,8.4321-4.6281c8.1935-1.0486,13.8577-8.7345,22.5609-8.0061c1.9634,0.1643,3.8675,0.3455,4.351,2.4792c0.425,1.8755,0.832,4.0331-1.0759,5.544\\\n      c-18.2584,14.4586-20.8104,35.7245-24.7955,56.4898c-1.3944,7.2658-0.8697,14.5257-1.5127,21.7516c-2.8005,31.471,3.6762,61.4234,13.2175,91.1585c4.0444,12.6045,4.3036,26.2307,8.7328,38.9634c4.0068,11.5184,15.0922,11.6749,23.5365,15.0579c5.0484,2.0225,9.7164-5.2557,11.6943-9.6366c3.7057-8.2075,9.5416-13.7765,16.4907-18.6859c12.3284-8.7096,16.9297-22.3638,22.9782-35.1882\\\n      c8.1787-17.341,14.037-35.5034,19.42-53.8111c6.8388-23.2592,15.6218-45.8617,22.3907-69.1958c4.4958-15.4983,3.2033-32.8002,13.2696-46.762c1.6783-2.3278,3.2123-3.1273,5.661-2.7791c2.3596,0.3355,3.1672,1.8767,3.2147,4.2362c0.1644,8.1492-0.858,15.9154,5.0558,23.6469c4.8447,6.3338-2.0234,14.0492-3.3074,21.2212c-3.3796,18.8762-10.0829,36.9467-13.001,55.9833\\\n      c-1.8146,11.8379-7.1525,22.8777-8.7707,35.0166c-2.3986,17.9924-5.4584,35.8757-5.0402,54.0963c0.0906,3.9482,14.4282,5.7612,19.0297,3.5066c23.6491-11.5874,33.8937-34.6657,47.8105-54.665c8.1664-11.7355,17.653-22.4071,21.7861-36.7877c2.8167-9.8004,0.8116-19.6388,2.9127-29.4528c2.0192-9.4308-0.1304-19.394,5.8221-28.5736c1.9961-3.0784-3.0546-9.0775-2.485-14.4386c0.3861-3.634,1.0776-5.4793,5.1478-5.4818\\\n      c3.9358-0.0024,4.5469,1.6982,5.3765,5.2722c1.3717,5.9097,0.7828,12.3792,6.6423,17.2458c7.4877,6.2189,3.9039,16.2656,5.4111,24.4266c2.8019,15.1722,4.9624,30.6644,3.6041,46.3203c-0.7494,8.6382-2.1603,16.938-8.1958,24.6049c6.3334-2.4852,11.9489-4.9367,17.7321-6.8914c6.3986-2.1626,11.8939-0.5347,14.1144,6.1927c2.0958,6.3495-0.2251,11.3675-6.807,14.0096\\\n      c-4.8372,1.9417-9.5835,4.1091-13.7469,7.9731c7.3838-2.4968,14.9465-4.5716,22.1022-7.6061c7.5247-3.1909,14.9907-5.1112,20.6921,2.0254c4.35,5.4449,3.0098,11.7018-3.2404,15.2975c-7.8605,4.5222-16.2833,8.0557-24.2687,12.3763c-3.9813,2.1542-7.5284,5.111-11.1965,8.7148c9.2311-6.2864,15.3691,2.6192,22.9108,3.9877c5.6097,1.018,7.6581,6.2732,6.7054,11.7343\\\n      c-0.915,5.2453-4.3065,8.4767-9.9653,8.6383c-2.1649,0.0618-4.3456,0.1619-6.4974-0.0159c-8.9344-0.738-17.1249-0.8885-20.0338,10.5915c-0.9843,3.8846-5.9789,5.4089-9.4567,7.6824c-19.4222,12.6967-36.5956,28.303-54.8976,42.4189c-13.9858,10.787-30.3599,18.5397-45.8971,27.2395c-29.3333,16.4247-60.1591,29.8059-90.6117,43.9459c-2.7668,1.2848-5.5468,3.1114-7.5527,5.3689\\\n      c-10.1463,11.4185-25.7784,5.5937-37.5333,12.3684c-17.3424,9.9951-38.6172,11.1592-55.0771,22.8166c-8.3154,5.8893-13.7162,15.4278-21.5775,22.4164c-14.3977,12.7996-30.6821,22.9966-45.7695,34.8167c-4.4827,3.5119-11.2747,1.3649-15.632,5.6129c-0.8258,0.8052-3.7278,2.2673-1.5515,2.8226c8.4112,2.1459,13.6305,11.1278,24.2057,9.3005c11.0841-1.9153,20.6749,1.8364,24.5319,14.2049\\\n      c1.0384,3.3298,0.8807,6.9236-0.8467,9.0945c-6.3306,7.9559,0.244,9.532,5.2704,9.9379c8.4708,0.6839,14.9417,11.0873,23.7096,6.0351c5.7369-3.3057,10.6589-7.5065,17.6789-7.3198c3.8422,0.1022,5.7548,1.0444,6.5765,5.855c0.5366,3.1408,6.7192,1.1563,8.9611,0.0167c4.9076-2.4944,7.5672-5.5059,13.8485-0.3151c3.0638,2.532,12.6889-1.6408,18.1237-5.9535c6.3939-5.0739,7.0616-5.0708,11.6884,1.2521\\\n      c0.2793,0.3817,1.5655,0.0026,2.3824,0.0185c8.7448,0.1699,18.0469-4.9277,26.0089,3.3524c1.3262,1.3792,5.1187,0.3812,7.7711,0.4924c2.9684,0.1245,5.6383,1.246,5.371,4.5253c-0.5536,6.791,3.8821,4.7084,6.6379,3.543c4.4561-1.8845,7.7902-5.9779,12.391,0.9507c2.0134,3.0322,7.8392-0.8837,11.8116-1.978c2.7432-0.7556,5.884-0.1301,5.5769,1.9506c-0.8594,5.8229,1.9001,7.1667,7.4756,6.603c-2.3851,2.8782-7.3793,0.566-6.8264,3.8755c0.5183,3.1028,4.9913,1.8455,7.5422,2.8344\\\n      c8.351,3.2374,16.4637,5.6459,25.6807,3.2389c2.9302-0.7652,4.5035,3.2864,3.8492,6.2938c-2.4282,11.16,6.2338,5.7814,9.2745,5.3735c5.3302-0.7149,9.5864-2.7936,9.2794,5.6146c-0.0344,0.9398,5.5296,2.0123,8.4397,3.1685c1.0803,0.4292,3.1356,0.2043,2.6588,2.1526c-0.1721,0.7034-1.7581,1.4487-2.7272,1.4886c-2.0571,0.0848-3.6083,1.397-3.3928,2.8605\\\n      c0.2639,1.7921,2.2011,2.6028,4.3076,2.5938c6.2742-0.0273,12.5612-0.0759,18.8146,0.3278c1.3814,0.0892,4.2186-0.2721,4.292,2.3807c0.0645,2.334-2.1257,3.1737-3.8917,4.0709c-2.0989,1.0663-4.2492,2.0313-9.0244,4.2952c13.7547-0.8378,24.6601,2.2728,35.5343-1.1948c2.4846-0.7923,4.6559,0.0892,5.5571,2.8123c1.1655,3.5215-1.674,4.8656-3.8955,5.876c-2.3206,1.0554-5.0685,1.171-7.8419,1.7411c1.2473,2.1392,2.4138,3.8807,5.6656,2.0815\\\n      c1.1595-0.6415,4.1028-0.3686,4.606,0.4666c5.707,9.4711,18.9784,9.2512,24.0485,20.8843c4.3562,9.9953,16.6538,12.8736,26.2379,18.0149c23.2124,12.4523,49.327,12.2679,73.9802,18.2343c37.2546,9.0162,75.0576,11.4517,113.3876,6.2303c12.4258-1.6926,25.405,0.8019,38.1371,1.1838c6.4247,0.1927,12.7202,0.2188,19.0408-2.3158c13.1309-5.2655,27.0063-5.6398,41.0668-5.6428\\\n      c32.061-0.007,64.4519-3.9672,95.943,3.6536c22.975,5.5598,47.2618,5.5239,69.1385,14.2304c19.2688,7.6686,39.2605,13.2163,58.2736,21.6434c14.9026,6.6051,30.7031,11.304,44.8765,19.5374c7.993,4.6433,16.975,7.882,24.3058,12.9541c16.0848,11.1289,27.0951,26.9515,31.5948,46.3514c1.3613,5.8688-2.1416,11.1237-7.1658,14.3942c-5.5844,3.6351-11.5906,3.3284-17.4323,0.1176\\\n      c-0.7825-0.4301-1.9656-1.2542-2.4041-0.985c-1.5654,0.9609,0.0542,1.8602,0.3306,2.8572c5.3461,19.2864,10.2928,38.7335,20.7571,56.1033c6.9684,11.5673,13.8928,22.9128,17.7357,36.2328c4.4778,15.5204,1.9634,30.6938,0.5166,45.9109c-2.2118,23.2663-8.6823,45.8109-17.7306,67.1342c-15.8127,37.2637-10.3013,75.2083-7.1584,113.4004c1.8746,22.7817,9.2577,43.7482,19.8231,63.4623\\\n      c6.0101,11.2142,16.4846,19.5226,23.3053,30.7299c7.6313,12.5392,11.2676,26.6625,18.7468,39.2609c9.4453,15.9097,15.6124,33.7717,29.9465,46.5707c8.8613,7.9125,10.8427,18.3865,8.2078,29.2091c-2.9313,12.0387-0.1106,22.9675,3.8353,33.9363c3.3328,9.2644,1.2588,18.7872,1.7119,28.1814c0.1866,3.8685,0.7362,7.2706,2.6073,10.8679c5.5603,10.6897,7.6799,22.5819,8.2457,34.3525\\\n      c0.8713,18.1246,0.4611,36.3259,0.1666,54.4877c-0.3324,20.5033,5.0764,39.8237,11.4191,58.9692c2.6145,7.8917,0.639,16.0868,2.749,24.151c5.749,21.9724,12.225,44.0968,10.7732,67.0698c-1.3022,20.6046,0.1572,40.9709,2.1003,61.3657c0.3738,3.9227,2.4625,7.7905,4.2382,11.4519c6.5568,13.5194,3.6339,28.0256,5.2366,42.0466c0.6858,6.0006,7.4572,11.5679,12.0756,16.7905\\\n      c5.7926,6.5504,6.828,13.587,1.9181,20.3889c-5.1257,7.1013-12.5638,9.5122-21.0157,5.5734c-2.3478-1.0942-4.2151-0.7188-5.0024,1.3019c-2.8081,7.2064-6.3828,13.9923-7.6058,21.9771c-1.2306,8.0328-7.1024,14.4818-11.9509,20.9634c-13.4324,17.9565-33.5811,26.806-52.2452,37.4818c-9.5396,5.4567-20.9597-1.7107-22.5873-13.285c-0.7493-5.328-3.5651-6.2427-8.0232-4.2488\\\n      c-8.3384,3.7289-15.6389,1.9028-20.6317-5.4058c-4.7477-6.9496-3.8645-14.0928,2.3225-20.3031c13.0427-13.0922,28.0889-23.4005,44.3418-32.0208c1.2623-0.6694,2.2354-0.9449,2.3209-2.6396c0.923-18.2605,9.7737-34.4634,13.5543-51.9154c3.2361-14.9385,5.1313-30.3241,5.9094-45.5989c0.9832-19.3007,3.4512-38.7933-3.3483-57.8485c-4.1747-11.6993-3.0779-24.4255-1.3779-36.149\\\n      c2.6715-18.4259-1.0774-35.948-3.2203-53.7813c-1.7919-14.9137-1.1637-30.8864-6.5817-44.3949c-6.2603-15.6086-8.6191-33.0011-20.3055-46.7677c-7.5271-8.8673-10.9706-21.3195-19.4474-29.5626c-10.4529-10.1647-15.6292-23.2896-18.6741-36.0765c-4.2964-18.0419-13.8285-32.3005-24.4128-46.3834c-12.0787-16.0712-23.2498-33.2236-37.5299-47.1158c-11.5402-11.2267-20.0815-24.7483-31.8364-35.6499\\\n      c-9.6412-8.9415-17.8689-18.5377-22.5797-32.1577c-8.0476-23.2671-21.0847-44.4325-37.0586-63.5859c-5.0776-6.0883-11.3993-10.4138-16.9305-15.5057c-6.0671-5.5852-13.2103-4.1552-18.3002-7.6442c-6.1477-4.2139-11.7654-9.611-17.8778-14.2035c-3.5912-2.6982-5.5209-3.0933-8.2784,1.4541c-8.1808,13.4912-18.7485,25.8289-24.9835,40.1024c-4.1046,9.3965-7.8572,20.3752-6.0347,31.7621\\\n      c0.4448,2.7786-1.6073,5.8643-1.8951,8.8677c-1.8375,19.1621,0.8757,38.2751,3.5367,56.9918c4.5394,31.9305,3.4198,63.1935-2.2306,94.755c-1.1943,6.6705,1.1101,14.5302,2.0282,21.6115c1.8179,14.0222,7.7646,29.4852-3.0737,43.2162c-10.9471,13.8689-14.9155,31.5416-24.434,46.2288c-2.8003,4.3207-5.6775,8.4955-6.8674,13.7009c-0.5028,2.1995-1.1766,3.5598,1.6844,3.3839\\\n      c-0.1385,2.5327-7.8312-1.2019-3.0372,4.7119c0.7499,0.9249-0.0665,4.7253-1.1429,5.2775c-11.0358,5.6604-7.7936,17.8785-12.4315,26.4182c-2.3013,4.2372-4.4419,8.7892-5.4412,13.4587c-2.1453,10.0237-6.6855,19.2007-9.0562,29.2231c-4.2427,17.9373-11.2023,35.2235-15.6335,53.1266c-3.9512,15.9637-6.4667,32.3306-8.7534,48.6405c-1.394,9.9436-9.7556,15.9763-12.2511,25.1992\\\n      c-1.4497,5.3575-4.2115,10.3677-6.4702,15.4957c-1.3809,3.135,1.3971,4.5909,2.6163,6.6578c-1.0914,1.7743-3.199-2.1034-3.8436,0.7811c-0.2356,1.0544-2.282,3.3242,1.2765,2.7661c-0.3508,0.8346-0.623,2.3464-1.0648,2.3977c-3.8213,0.4441-3.7485,3.3252-3.8711,5.9664c-0.9059,19.5405-8.1771,37.4069-15.0918,55.2533c-2.2599,5.8326-2.7476,11.0415-1.309,16.8058c3.7839,15.1617-0.8181,24.3074-15.314,28.0292\\\n      c-7.8846,2.0244-13.42-2.0824-15.642-10.1116c-0.3224-1.1649-0.7656-2.2965-1.1531-3.4435c-0.9409,0.8608-1.9561,1.6542-2.8114,2.5931c-10.2319,11.2316-15.916,26.588-32.4655,32.0437c-13.5264,4.4591-27.5582,8.6099-38.6547,18.4224c-5.8607,5.1825-10.7003,12.0623-20.3315,9.3951c-4.5238-1.2528-8.8931-3.6682-9.8171-7.6284c-2.8938-12.4015-13.0277-8.9935-20.1492-8.8873\\\n      c-11.1881,0.167-20.0178-8.9568-18.0038-20.0471c1.5566-8.5714,3.9722-14.2743,14.3833-13.4677c4.5618,0.3534,9.1246-2.3342,12.8046-5.7682c8.5223-7.9532,20.021-9.7804,30.1127-14.5211c5.5156-2.5909,10.3201-6.778,15.2645-10.4861c11.4998-8.6237,20.8425-19.7927,31.5488-28.9489c13.6863-11.705,16.1871-28.7456,25.5503-42.3021c5.6566-8.1899,10.1367-18.5266,15.6785-27.6274\\\n      c1.0427-1.7123-0.2766-3.7784-0.2643-5.5898c0.1227-18.1927,11.8855-31.9426,17.8086-47.7883c11.7384-31.4022,14.4259-64.2494,19.2347-96.8533c3.2745-22.2001,6.2163-44.5425,15.2423-65.448c4.2252-9.786-2.9913-18.0626-3.9335-27.1885c-0.3512-3.403-1.9519-6.7335-1.9764-10.1045c-0.209-28.6309,0.6462-57.2992-0.5853-85.8801c-0.6107-14.1726-5.567-28.1024-7.4197-42.2905\\\n      c-2.6219-20.0797-3.9943-40.3192-6.2665-60.449c-2.3472-20.7922-1.9141-41.7738-4.8933-62.5641c-0.8669-6.0499-2.0723-12.2616-2.2927-18.49c-0.066-1.8651-1.712-1.6212-2.5676-1.0251c-22.2626,15.5106-49.5001,21.0667-71.9703,36.5226c-11.1041,7.6379-25.2599,9.3685-38.764,11.1752c-10.9417,1.464-22.0037,2.2147-32.4301,6.4445c-8.557,3.4716-17.7985,4.1799-26.7979,4.3883\\\n      c-27.8975,0.6466-55.8071,0.3658-83.5872-2.8925c-2.9341-0.344-3.4291,1.2352-3.1942,3.5505c1.7939,17.6855-2.3011,35.1116-4.106,52.4261c-1.4744,14.1433-0.9521,28.2164-2.14,42.2695c-0.9008,10.6567-0.2926,21.2754,2.9843,31.9272c4.3644,14.1873,6.6509,29.0155,6.3538,43.9742c-0.3157,15.8875,6.3622,30.7072,6.3652,46.556c0.004,21.1482,5.6824,41.6315,8.0281,62.4645\\\n      c1.8173,16.1392,7.3154,31.7469,7.4398,47.8459c0.2219,28.7407,9.4629,54.2152,24.1759,78.2661c8.8715,14.5017,10.8536,31.4263,16.2361,47.1578c6.5216,19.0616,4.0193,40.5917,14.3579,58.2925c8.563,14.661,7.5615,33.3156,21.1581,45.8472c6.1616,5.679,1.3604,25.7288-5.1738,27.9431c-4.9884,1.6904-8.1344-2.4287-11.3936-4.0999c-9.5763-4.9104-12.1653,3.2292-16.1698,7.6324\\\n      c-5.3826,5.9186-2.5537,16.3125-10.574,21.2131c5.1539,7.136-0.4823,12.8904-2.4861,19.095c-0.309,0.9564-1.4109,2.5918-1.486,2.5554c-5.5427-2.6958-8.6727,3.0488-12.208,3.6383c-10.2455,1.7087-19.1818,7.8907-29.7183,7.848c-4.7307-0.0192-8.5566,1.8602-12.605,4.483c-5.7311,3.713-12.1869,2.9497-17.4706-1.7257c-4.7437-4.1975-9.1454-3.4843-14.0962-0.4509\\\n      c-6.6335,4.0646-13.344,3.9529-19.2654-1.426c-9.1973-8.3546-8.9055-15.9056,1.111-25.7336c7.204-7.0685,14.7693-13.7681,22.1459-20.6619c3.0187-2.821,5.7162-5.6123,6.479-10.1761c1.0815-6.4707,5.4004-10.7993,11.9535-11.6528c13.0974-1.7058,17.4233-11.7173,22.7324-21.7078c6.9586-13.0939,2.8842-26.0563,1.7285-39.2286c-1.8993-21.6503-7.8666-42.6157-9.762-64.3989\\\n      c-1.0441-11.9977-4.3495-24.6583-7.775-36.7977c-5.3953-19.1196-8.9274-38.8055-15.0531-57.6656c-4.8981-15.0804-8.5698-31.0707-18.7653-43.907c-10.7532-13.5387-21.4388-26.9851-31.2086-41.3767c-11.2405-16.5579-13.2182-34.8376-15.8348-53.1006c-4.3273-30.2023-10.9272-59.8413-17.8246-89.5135c-5.366-23.0842-8.6169-46.7823-19.535-68.0962c-9.7228-18.9806-19.5848-37.9023-31.5256-55.7389\\\n      c-7.3666-11.0037-13.4939-23.1781-18.1161-35.5945c-6.3001-16.9235-5.3704-16.1764-23.0526-14.7249c-14.2667,1.1711-12.8811,11.2682-13.3436,19.7142c-0.8461,15.4536-0.246,30.9866-0.2402,46.4865c0.0058,15.3905,0.0037,30.7222-4.7188,45.6888c-4.6336,14.6854-2.9917,29.9558-3.2378,45.0405c-0.3576,21.9161-3.5289,42.8326-13.0197,63.3727c-5.0865,11.0084-4.1334,25.3485-3.9214,38.1522\\\n      c0.446,26.9369-7.6138,51.9637-16.0093,76.8352c-2.3854,7.0665-8.9876,12.7664-13.8737,18.9202c-8.9583,11.2826-12.9743,24.4141-12.8215,38.4342c0.2629,24.1254-2.4291,47.6462-7.2446,71.3833c-3.9116,19.2814-2.3248,39.7777-2.4045,59.4307c-0.0507,12.4987-0.796,24.7141-2.3989,36.9669c-2.9781,22.7646-2.1662,45.6216-2.1625,68.4576c0.0008,5.0847,1.0062,10.1744,1.624,15.2527\\\n      c1.3203,10.8514-4.9473,17.5811-13.5566,21.5077c-5.2768,2.4066-10.9425-2.287-13.5771-6.3193c-8.4724-12.9673-15.7826-5.4473-22.5367,0.8466c-3.6476,3.3989-5.7403,8.5992-8.0862,13.2147c-1.5059,2.9629,3.162,1.6892,3.2632,4.0632c-1.7883-0.1263-4.067-1.1049-5.0518,1.2313c-0.8649,2.0515,0.812,2.5819,2.348,3.3417c0.4866,0.2407,0.6625,2.4752,0.1423,3.1067c-1.1416,1.3853-1.3993-0.2794-1.8618-0.9857\\\n      c-6.0726,5.4142-14.2776,0.0745-21.2022,4.4691c-3.03,1.9227-9.1051,5.8359-14.0809,1.1493c-1.4793-1.3936-1.7755,0.2751-2.4116,0.7623c-12.5388,9.6067-27.0359,9.9503-40.3157,1.177c-3.8906-2.5704-7.5535-0.525-10.7369,1.8922c-6.6964,5.0841-13.804,5.658-19.9236,0.0408c-5.8321-5.3533-9.3364-11.4535-4.3464-20.3881c7.0033-12.5399,19.5148-17.1528,30.1995-24.7286\\\n      c13.3826-9.4888,31.2062-12.0614,42.2908-22.9664c13.0073-12.7963,28.52-24.6176,32.1171-45.827c2.9642-17.4779,10.9089-34.1636,17.1807-51.0012c2.3975-6.4364,1.2188-12.9669,2.3318-19.3273c3.0823-17.6146,7.1002-35.0742,9.8622-52.7336c2.9287-18.7247,8.5432-38.0774,6.2373-56.3021c-2.762-21.8291-3.1088-44.0537-7.8506-65.6117c-4.9019-22.2863-1.6805-43.918,5.4291-64.9034\\\n      c2.6133-7.7137,4.9759-15.3231,4.7703-23.142c-0.5762-21.9117,3.3264-44.1086-4.4501-65.627c-10.4459-28.9052-13.7719-59.8296-24.0493-88.7108c-8.7856-24.6891-8.3187-49.4395-6.28-74.8639c0.7621-9.5034-3.8288-19.358-3.6367-29.006c0.2164-10.8628-6.8794-15.09-13.8913-19.7423c-12.6144-8.3694-22.892-18.8883-31.2483-31.4336c-1.1548-1.7336-2.7338-3.6305-4.5598-4.4017\\\n      c-15.8262-6.6844-13.586-21.3673-15.4435-34.2484c-0.9195-6.3767-2.969-11.5094-9.0872-15.4213c-4.7551-3.0404-8.5281-8.2701-11.5482-13.2484c-8.9653-14.7787-20.7907-26.6754-33.6465-38.1206c-12.6931-11.3004-19.369-25.5409-18.8718-43.9358c0.3368-12.4606-2.1363-25.5853-6.2845-37.9121c-0.7175-2.1318-1.2139-1.9858-2.9652-1.3997c-10.0139,3.3516-20.1521-1.6108-23.541-11.7312\\\n      c-0.8314-2.4829-1.9992-3.9988-4.2861-4.9977c-12.8165-5.5979-19.2065-16.0201-22.1009-29.2032c-0.7373-3.3581-2.317-5.7819-6.3229-7.3517c-9.6249-3.7719-13.1117-12.061-12.6506-21.9697c0.2057-4.42,1.0628-7.7584-4.9476-9.8873c-5.4706-1.9377-5.03-8.7231-5.7951-13.9127c-0.2641-1.7915-0.1962-4.4197-2.2171-4.3869c-2.5022,0.0406-1.546,2.7819-1.7071,4.4415c-2.3625,24.3346,2.1149,49.2386-5.7079,73.0895\\\n      c-3.2252,9.8331-7.6815,19.3268-17.8534,23.9254c-3.4836,1.5749-1.4912,4.8044-3.7257,6.8381c-5.8107,5.2885-11.918,1.137-17.5628,0.8578c-9.3949-0.4647-15.7497-7.4891-22.8818-13.1889c-6.814-5.4457-6.2862-12.1004-7.6671-19.0081c-2.2119-11.0654-10.9807-20.7369-7.9951-32.8705c2.9753-12.0925,4.0875-24.2523,3.7435-36.6171c-0.1655-5.9503-0.8554-10.5432-8.448-12.7183\\\n      c-16.4487-4.712-31.4212-12.9959-45.2501-23.1093c-8.0748-5.9053-9.8222-15.8885-14.5836-23.937c-6.9025-11.6678-8.2823-25.7596-17.1588-36.7556c-4.8629-6.024-6.0052-14.4163-12.2247-20.3439c-9.5407-9.0927-21.2257-12.5582-33.6257-6.664c-10.1933,4.8453-19.3375,11.8149-27.1701,19.7913c-12.4016,12.6293-24.8011,11.6337-34.9833-2.9564c-3.2376-4.6392-6.9013-9.1144-15.861-7.8563\\\n      c-14.6727,2.0605-31.0859,4.9852-42.0845-11.0887c-2.7362-3.9987-7.3919,0.6589-10.6468,1.9679c-19.0431,7.6585-35.1808-3.3398-33.6038-23.2465c0.4223-5.33,2.884-9.8862,5.533-14.22c8.1114-13.2702,4.7637-28.902,9.1219-42.8192c9.7039-30.988,22.6844-60.4019,51.0015-79.0918c12.2884-8.1106,26.5288-13.2238,39.6705-20.1036c4.4052-2.3062,8.1187-5.9158,12.2084-8.846\\\n      c8.0149-5.7426,17.679-4.012,26.5109-5.0521c30.4019-3.5801,61.0127-5.4618,91.3441-9.4938c5.1275-0.6816,12.2112-1.5732,16.9009-6.5007c2.5643-2.6943,6.5005-3.3747,10.2389-3.0557c13.5266,1.1541,20.3932-10.344,30.3904-15.8746c0.3986-0.2205,0.4258-1.1124,0.6262-1.6915c-0.9345-0.2062-1.8756-0.3866-2.8026-0.6224c-19.1975-4.8843-39.4529-3.7285-58.3609-10.1009\\\n      c-5.7958-1.9534-10.85-4.3343-17.56-1.8892c-10.5038,3.8276-17.1761-7.5402-26.6263-8.4988c-25.7443-2.6115-49.852-13.597-76.2392-13.5844c-23.6446,0.0112-40.343-14.7412-56.4759-30.222c-14.7661-14.1693-28.6786-28.6282-36.9781-47.8286c-3.7443-8.6622-4.5612-17.6644-4.8293-26.5809c-0.6886-22.9005-3.3432-46.335,8.8429-67.4721c5.8165-10.0888,2.2532-21.1312,4.5837-31.6096\\\n      c1.9956-8.9724,10.1136-14.4952,11.1885-23.2519c1.1676-9.5125,6.464-7.2792,11.5093-4.5024c3.5464,1.9518,3.2596,6.621,0.8652,8.6111c-4.5274,3.7628-4.1791,7.4987-3.6998,12.7489c1.1428,12.5182,0.4994,25.1324-1.9317,37.5643c-0.3778,1.9321-0.9034,3.8907-0.8923,5.8344c0.0674,11.9105,0.2024,23.7775-3.1692,35.4189c-2.4828,8.5727,4.0152,15.3551,5.3493,23.2388\\\n      c2.805,16.5758,13.2705,28.9013,26.011,38.029c10.0809,7.2223,22.843,10.7096,34.4529,15.7673c0.5538,0.2413,2.1189-0.3642,2.1218-0.5897c0.0125-0.9492-0.1024-2.1579-0.6851-2.8167c-4.9843-5.6349-8.4436-12.7623-16.1297-15.76c-3.6727-1.4324-5.3033-5.222-7.7571-8.1144c-24.5615-28.9526-24.3107-62.9541-21.0079-97.9366c1.033-10.9418,7.1042-19.9673,8.9005-30.5076\\\n      c0.8656-5.0795,5.5495-6.9922,10.4999-6.1329c5.507,0.9558,8.6509,5.2566,8.4119,10.2953c-1.3667,28.8223,4.8997,56.3852,12.6152,83.8123c1.4644,5.2058,5.4777,6.3669,9.2823,8.5475c6.151,3.5255,12.0699,7.459,18.0506,11.277c2.7961,1.7849,5.3454,1.9953,8.2714,0.0088c3.0527-2.0726,3.2363-5.0823,3.5303-8.1622c0.1212-1.27-0.3137-2.6868,0.0984-3.821c5.3567-14.7453,2.7219-27.2565-9.6055-37.5947\\\n      c-11.5582-9.6931-16.285-23.4043-20.1369-37.2591c-5.1255-18.4356-15.3288-35.6705-13.4461-55.8198c0.7055-7.5507,1.1464-15.1272,1.6248-22.6972c0.1734-2.7437,1.7783-4.3038,4.1685-3.6866c3.2398,0.8365,7.5366,0.2604,9.0574,4.4238c3.3519,9.1763,4.1564,20.5979,10.2424,27.1822c12.0166,13.0004,14.2307,29.8539,22.0531,44.3148c0.3662,0.6769,0.9859,1.2167,1.4875,1.8204\\\n      c0.5817-0.7295,1.2866-1.3919,1.7257-2.199c3.5661-6.5538,2.9064-14.076,4.7522-21.0363c1.8993-7.1621,3.8456-14.744,13.3689-13.5211c8.4742,1.0882,10.8195,7.2414,11.2819,15.4768c1.0386,18.4983-2.5311,36.6203-3.2924,54.948c-0.097,2.3365-0.1722,4.2567,2.8701,5.4534c9.1157,3.5857,19.2279,5.4327,26.9982,0.2214c4.8122-3.2273,10.915-8.7052,11.6978-16.435\\\n      c1.7138-16.924-5.2391-32.3204-7.8684-48.436c-2.278-13.9622-8.3219-29.3759,2.7221-43.1177c1.8743-2.3321-1.07-8.3206,5.2589-7.4251c5.2315,0.7402,3.8271,6.0146,5.7346,8.9254c10.1613,15.5063,7.9279,33.8411,12.6981,50.4773c1.7534,6.1147,5.8592,11.9991,11.6293,15.5517c6.9243,4.2634,12.5008,9.6102,16.4505,16.6622c3.2875,5.8697,6.1874,0.4312,9.0301-0.4125\\\n      c13.6627-4.0554,15.244-8.5257,9.9844-21.4924c-7.4028-18.2503-8.2118-37.6051-7.0355-56.9584c0.3599-5.9211,5.3194-8.627,11.2631-8.1185c6.0101,0.5142,8.8308,4.1759,9.7328,10.063C396.6204,279.7477,394.8628,290.735,401.1931,300.0653z M545.2773,465.4646c-1.9276-15.8704,2.1465-30.5817,11.711-42.2635c9.259-11.3087,12.5128-23.8175,14.493-37.5272c-1.8023,0.7409-3.6828,1.1448-5.1255,2.1667\\\n      c-9.4597,6.7001-19.5798,11.9564-30.9607,14.4952c-9.4216,2.1017-11.5656,7.3438-8.4456,16.3486c3.2651,9.4238,5.2083,19.2293,6.9949,29.127C535.0031,453.6757,536.2515,462.3827,545.2773,465.4646z M441.6511,513.2285c-9.8591-11.8128-21.5371-21.76-23.419-38.2924c-0.6141-5.3949-3.6832-10.5104-5.6294-15.7537c-4.3739,2.1908-6.363,6.5722-9.2832,10.0988c-0.2112,0.2551-0.5934,0.4272-0.6912,0.7091\\\n      c-2.1966,6.3301-11.1827,12.4475-4.9002,18.9991c6.3948,6.6687,15.7003,10.5287,14.821,21.9138c-0.0151,0.1955,0.4281,0.5137,0.716,0.6326C422.6261,515.3983,432.1159,516.8524,441.6511,513.2285\"'));\n      setTracedPoints(points);\n      setUserDrawing(false);\n    }\n    \n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener(\"load\", reqListener);\n    oReq.open(\"GET\", \"./mooseSVGData\");\n    oReq.send();\n\n    \n  }, []);\n\n  function downloadButtonPressed() {\n    if (!drawVectors) downloadCanvasAsImage();\n  }\n\n  function downloadCanvasAsImage() {\n    let image = canvasRef.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    let link = document.createElement('a');\n    link.download = \"fourier.png\";\n    link.href = image;\n    link.click();\n  }\n\n  function readAndUseSVG(e) {\n    if (e.target.files[0] === undefined)\n      return;\n    \n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = (e) => { \n      setTracedPoints(getTracedPoints(ParseSVG(e.target.result)));\n      setUserDrawing(false);\n    };\n    reader.readAsText(e.target.files[0]);\n  }\n\n  return (\n    <div>\n\n      <div style={{height: '20px'}}/>\n      <Fourier drawArrows={drawVectors}\n               canvasRef={canvasRef} initCanvasRef={(ref) => setCanvasRef(ref)}\n               userDrawing={userDrawing} setUserDrawing={(use) => setUserDrawing(use)}\n               tracedPoints={tracedPoints} setTracedPoints={(points) => setTracedPoints(points)} \n               vectorAmount={vectorAmount+1}/*Amount should be 2n+1*/\n               maxVectorAmount={maxVectorAmount}\n      />\n      <div style={{height: '20px'}}/>\n\n      \n      <div className=\"center\">\n        <label htmlFor=\"file-upload\" className=\"customFileUpload\">\n          Upload SVG\n        </label>\n        <input id=\"file-upload\" type=\"file\" onChange={(e) => readAndUseSVG(e)}/>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <button className={drawVectors ? \"button-disabled\" : \"button\"} onClick={() => downloadButtonPressed()}>Download as png</button>\n        \n      </div>\n\n\n      <div style={{height: '20px'}}/>\n\n      <div className=\"center\">\n        <button className=\"button\" onClick={() => {setDrawVectors(!drawVectors);}}>{drawVectors ? \"Trace\" : \"Image\"}</button>\n\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <input type=\"range\" name={vectorAmount} value={vectorAmount} min=\"2\" max={maxVectorAmount.toString()} step=\"2\" onInput={(event) => { setVectorAmount(Number(event.target.value));}} />\n        <h6>&nbsp;Vectors: {vectorAmount}&nbsp;</h6>\n\n      </div>\n\n      <div style={{height: '40px'}}/>\n\n      <div className=\"center small\">\n        <a href=\"https://github.com/RaskiTech/Fourier-art\">Github</a> \n          &nbsp;&nbsp;|&nbsp;&nbsp; \n        <a href=\"https://en.wikipedia.org/wiki/Fourier_series\" target=\"_blank\" rel=\"noreferrer\">Math behind it</a>\n      </div>\n      <div style={{height: '20px'}}/>\n\n\n      <Modal\n        show={showStartModal}\n        onHide={() => setShow(false)}\n        dialogClassName=\"modal-90w\"\n        size=\"lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Fourier art\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h5>Quick start</h5>\n          <p>\n            Rotating arrows of different sizes and speeds can approximate any shape. More of these arrows\n            will result in a more accurate shape while less will result in a slighty worse, more artistic shape.\n            This \"Fourier series\" is here visualized in a clean way.\n          </p>\n          <p>\n            You can import an svg to trace or draw your own straight to the canvas. \n            Note that the svg should only contain a single line.\n          </p>\n        </Modal.Body>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\nfunction getTracedPoints(parsedText) {\n  function distanceBetweenPoints(x1, y1, x2, y2) { return Math.sqrt(Math.pow(x1-x2, 2)+Math.pow(y1-y2, 2)); };\n\n  let points = [];\n  let lastPoint = [0, 0];\n\n  let control = 0;\n  let control2 = 0;\n  let endPoint = 0;\n  let dist = 0;\n  let i = 0;\n  while (i < parsedText.length) {\n\n    switch (parsedText[i]) {\n      case \"M\":\n        lastPoint = [parseInt(parsedText[i+1]), parseInt(parsedText[i+2])];\n        i += 3;\n        break;\n      case \"L\":\n        endPoint = [parseInt(parsedText[i+1]), parseInt(parsedText[i+2])]\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0; f < 1; f += 1/dist)\n          points.push([lastPoint[0] * (1-f) + endPoint[0] * f, \n                       lastPoint[1] * (1-f) + endPoint[1] * f]);\n        lastPoint = endPoint;\n        i += 3;\n        break;\n      case \"l\":\n        endPoint = [parseInt(parsedText[i+1]) + lastPoint[0], parseInt(parsedText[i+2]) + lastPoint[1]]\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0; f < 1; f += 1/dist)\n          points.push([lastPoint[0] * (1-f) + endPoint[0] * f, \n                       lastPoint[1] * (1-f) + endPoint[1] * f]);\n        lastPoint = endPoint;\n        i += 3;\n        break;\n      case \"Q\":\n        control = [parseInt(parsedText[i+1]), parseInt(parsedText[i+2])];\n        endPoint = [parseInt(parsedText[i+3]), parseInt(parsedText[i+4])];\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0; f < 1; f += 1/dist)\n          points.push([lastPoint[0]*(1-f)*(1-f)+2*control[0]*f*(1-f)+endPoint[0]*f*f,\n                       lastPoint[1]*(1-f)*(1-f)+2*control[1]*f*(1-f)+endPoint[1]*f*f]);\n        lastPoint = endPoint;\n        i += 5;\n        break;\n      case \"q\":\n        control = [parseInt(parsedText[i+1]) + lastPoint[0], parseInt(parsedText[i+2]) + lastPoint[1]];\n        endPoint = [parseInt(parsedText[i+3]) + lastPoint[0], parseInt(parsedText[i+4]) + lastPoint[1]];\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0; f < 1; f += 1/dist)\n          points.push([lastPoint[0]*(1-f)*(1-f)+2*control[0]*f*(1-f)+endPoint[0]*f*f,\n                       lastPoint[1]*(1-f)*(1-f)+2*control[1]*f*(1-f)+endPoint[1]*f*f]);\n        lastPoint = endPoint;\n        i += 5;\n        break;\n      case \"C\":\n        control = [parseInt(parsedText[i+1]), parseInt(parsedText[i+2])];\n        control2 = [parseInt(parsedText[i+3]), parseInt(parsedText[i+4])];\n        endPoint = [parseInt(parsedText[i+5]), parseInt(parsedText[i+6])];\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0.0; f < 1; f += (1/dist))\n          points.push([lastPoint[0]*(1-f)*(1-f)*(1-f)+3*control[0]*f*(1-f)*(1-f)+3*control2[0]*f*f*(1-f)+endPoint[0]*f*f*f,\n                       lastPoint[1]*(1-f)*(1-f)*(1-f)+3*control[1]*f*(1-f)*(1-f)+3*control2[1]*f*f*(1-f)+endPoint[1]*f*f*f]);\n        lastPoint = endPoint;\n        i += 7;\n        break;\n      case \"c\":\n        control = [parseInt(parsedText[i+1]) + lastPoint[0], parseInt(parsedText[i+2]) + lastPoint[1]];\n        control2 = [parseInt(parsedText[i+3]) + lastPoint[0], parseInt(parsedText[i+4]) + lastPoint[1]];\n        endPoint = [parseInt(parsedText[i+5]) + lastPoint[0], parseInt(parsedText[i+6]) + lastPoint[1]];\n        dist = distanceBetweenPoints(lastPoint[0], lastPoint[1], endPoint[0], endPoint[1]);\n        for (let f = 0.0; f < 1; f += (1/dist))\n          points.push([lastPoint[0]*(1-f)*(1-f)*(1-f)+3*control[0]*f*(1-f)*(1-f)+3*control2[0]*f*f*(1-f)+endPoint[0]*f*f*f,\n                       lastPoint[1]*(1-f)*(1-f)*(1-f)+3*control[1]*f*(1-f)*(1-f)+3*control2[1]*f*f*(1-f)+endPoint[1]*f*f*f]);\n        lastPoint = endPoint;\n        i += 7;\n        break;\n      default:\n        console.log(parsedText);\n        console.warn(\"Parsed array contained unaccounted value\", parsedText[i], \"at\", i);\n        i++;\n    }\n  }\n  \n  return points;\n}\n\n// Find d=\" and then parse is until the next \"\nfunction ParseSVG(text) {\n  try {\n\n    let i = 0;\n    let parsed = [];\n    while (i < text.length) {\n      if (text[i] === \"d\" && text[i-1] === \" \") {\n        i++;\n        while (text[i] === \" \") i++;\n        if (text[i] !== \"=\") continue;\n        i++\n        while (text[i] === \" \") i++;\n        if (text[i] !== '\"') continue;\n        i++\n        // Path has started\n        let prevElementEndIndex = i-1;\n        let continueParsing = true;\n        while (continueParsing) {\n\n          switch (text[i]) {\n            case \"M\":case \"L\":case \"l\":\n            case \"Q\":case \"q\":case \"C\":\n            case \"c\":\n              if (prevElementEndIndex !== i-1)\n                parsed.push(text.substring(prevElementEndIndex+1, i));\n              parsed.push(text[i]);\n              prevElementEndIndex = i;\n              break;\n\n            case \"0\":case \"1\":case \"2\":case \"3\":case \"4\":\n            case \"5\":case \"6\":case \"7\":case \"8\":case \"9\":\n            case \".\":\n              break;\n            \n            // Minus can only be at the start, it is possible that it starts a new number\n            case \"-\":\n              if (prevElementEndIndex !== i-1)\n                parsed.push(text.substring(prevElementEndIndex+1, i));\n              prevElementEndIndex = i-1;\n              break;\n            \n            case '\"':\n              if (prevElementEndIndex !== i-1)\n                parsed.push(text.substring(prevElementEndIndex+1, i));\n              continueParsing = false;\n              break;\n\n            default:\n              if (prevElementEndIndex !== i-1)\n                parsed.push(text.substring(prevElementEndIndex+1, i));\n              prevElementEndIndex = i;\n          }\n          i++;\n        }\n      }\n\n      i++\n    }\n    \n    return parsed;\n  }\n  catch (e) {\n    console.error(\"File parsing failed:\\n \", e);\n    return [];\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}